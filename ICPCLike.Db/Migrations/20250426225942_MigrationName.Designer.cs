// <auto-generated />
using System;
using ICPCLike.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ICPCLike.Db.Migrations
{
    [DbContext(typeof(IcpcLikeContext))]
    [Migration("20250426225942_MigrationName")]
    partial class MigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ICPCLike.Db.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("IcpcId")
                        .HasColumnType("text")
                        .HasColumnName("icpc_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Sex")
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PenaltyTime")
                        .HasColumnType("integer")
                        .HasColumnName("penalty_time");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.Property<int>("SolvedTasks")
                        .HasColumnType("integer")
                        .HasColumnName("solved_tasks");

                    b.Property<int>("StageId")
                        .HasColumnType("integer")
                        .HasColumnName("stage_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int>("stage_id")
                        .HasColumnType("integer");

                    b.Property<int>("team_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("stage_id");

                    b.HasIndex("team_id");

                    b.ToTable("results", t =>
                        {
                            t.Property("stage_id")
                                .HasColumnName("stage_id1");

                            t.Property("team_id")
                                .HasColumnName("team_id1");
                        });
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.Property<int>("season_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("season_id");

                    b.ToTable("stages", t =>
                        {
                            t.Property("season_id")
                                .HasColumnName("season_id1");
                        });
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Substitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NewContestantId")
                        .HasColumnType("integer")
                        .HasColumnName("new_contestant_id");

                    b.Property<int>("OldContestantId")
                        .HasColumnType("integer")
                        .HasColumnName("old_contestant_id");

                    b.Property<DateTime>("SubstitutionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("substitution_date");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int>("new_contestant_id")
                        .HasColumnType("integer");

                    b.Property<int>("old_contestant_id")
                        .HasColumnType("integer");

                    b.Property<int>("team_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("new_contestant_id");

                    b.HasIndex("old_contestant_id");

                    b.HasIndex("team_id");

                    b.ToTable("substitutions", t =>
                        {
                            t.Property("new_contestant_id")
                                .HasColumnName("new_contestant_id1");

                            t.Property("old_contestant_id")
                                .HasColumnName("old_contestant_id1");

                            t.Property("team_id")
                                .HasColumnName("team_id1");
                        });
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("hidden");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<int?>("organization_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("organization_id");

                    b.ToTable("teams", t =>
                        {
                            t.Property("organization_id")
                                .HasColumnName("organization_id1");
                        });
                });

            modelBuilder.Entity("ICPCLike.Db.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContestantId")
                        .HasColumnType("integer")
                        .HasColumnName("contestant_id");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("leave_date");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int>("contestant_id")
                        .HasColumnType("integer");

                    b.Property<int>("team_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("contestant_id");

                    b.HasIndex("team_id");

                    b.ToTable("team_members", t =>
                        {
                            t.Property("contestant_id")
                                .HasColumnName("contestant_id1");

                            t.Property("team_id")
                                .HasColumnName("team_id1");
                        });
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Result", b =>
                {
                    b.HasOne("ICPCLike.Db.Models.Stage", "Stage")
                        .WithMany("Results")
                        .HasForeignKey("stage_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICPCLike.Db.Models.Team", "Team")
                        .WithMany("Results")
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Stage", b =>
                {
                    b.HasOne("ICPCLike.Db.Models.Season", "Season")
                        .WithMany("Stages")
                        .HasForeignKey("season_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Substitution", b =>
                {
                    b.HasOne("ICPCLike.Db.Models.Person", "NewContestant")
                        .WithMany()
                        .HasForeignKey("new_contestant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICPCLike.Db.Models.Person", "OldContestant")
                        .WithMany()
                        .HasForeignKey("old_contestant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICPCLike.Db.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewContestant");

                    b.Navigation("OldContestant");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Team", b =>
                {
                    b.HasOne("ICPCLike.Db.Models.Organization", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.TeamMember", b =>
                {
                    b.HasOne("ICPCLike.Db.Models.Person", "Contestant")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("contestant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICPCLike.Db.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contestant");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Organization", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Person", b =>
                {
                    b.Navigation("TeamMemberships");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Season", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Stage", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("ICPCLike.Db.Models.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
